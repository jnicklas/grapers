extern crate graphers_core;
extern crate serde;

use std::borrow::Cow;
use serde::{Serialize, Serializer};
use serde::ser::{MapVisitor};
use self::graphers_core::*;

{{#query_root}}
pub struct QueryResult<'a, T>({{name}}Selection<'a, T>) where T: 'a + Resolve{{name}};
{{/query_root}}

////////////////////////////////////////////////////////////////////////////////
// RESOLVE TRAITS
// Implement these in your own code to resolve the fields in a query
////////////////////////////////////////////////////////////////////////////////

pub trait Schema {
    {{#objects}}
    type {{name}}: Resolve{{name}};
    {{/objects}}

    {{#query_root}}
    fn query<'a>(&self, query: &'a query::Query) -> QueryResult<'a, Self::{{name}}> {
        QueryResult({{name}}Selection { target: self.root(), selection_set: query.selection_set() })
    }

    fn root(&self) -> Self::{{name}};
    {{/query_root}}
}

{{#objects}}
pub trait Resolve{{name}} {
    type Schema: Schema;

    {{#fields}}
    fn {{name}}(&self, {{{parameters}}}) -> {{{ty}}};
    {{/fields}}
}

{{/objects}}

////////////////////////////////////////////////////////////////////////////////
// INTERFACES
// GraphQL interfaces which can be implemented by other types
////////////////////////////////////////////////////////////////////////////////

{{#interfaces}}
pub trait {{name}} {
    type Schema: Schema;

    {{#fields}}
    fn {{name}}(&self, {{{parameters}}}) -> {{{ty}}};
    {{/fields}}
}

{{/interfaces}}

////////////////////////////////////////////////////////////////////////////////
// PLUMBING
// Everything after this line is plumbing machinery, you can ignore it
////////////////////////////////////////////////////////////////////////////////

{{#query_root}}
impl<'a, T> Serialize for QueryResult<'a, T> where T: 'a + Resolve{{name}} {
    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {
        self.0.serialize(serializer)
    }
}
{{/query_root}}

{{#objects}}
struct {{name}}Selection<'a, T> where T: 'a + Resolve{{name}} {
    target: T,
    selection_set: &'a [query::Selection],
}

impl<'a, T> Serialize for {{name}}Selection<'a, T> where T: 'a + Resolve{{name}} {
    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {
        serializer.serialize_map({{name}}StructVisitor {
            target: &self.target,
            iter: self.selection_set.iter(),
        })
    }
}

struct {{name}}StructVisitor<'a, T, I> where T: 'a + Resolve{{name}}, I: Iterator<Item=&'a query::Selection> {
    target: &'a T,
    iter: I,
}

impl<'a, T, I> MapVisitor for {{name}}StructVisitor<'a, T, I> where T: 'a + Resolve{{name}}, I: Iterator<Item=&'a query::Selection> {
    fn visit<S>(&mut self, serializer: &mut S) -> Result<Option<()>, S::Error> where S: Serializer {
        match self.iter.next() {
            Some(&query::Selection::Field(ref field)) => {
                match field.name().as_str() {
                    {{#fields}}
                    "{{name}}" => {
                        let target = self.target.{{name}}({{{arguments}}});
                        {{{preserialize}}}
                        Ok(Some(try!(serializer.serialize_map_elt(&field.alias().as_str(), target))))
                    },
                    {{/fields}}
                    name => panic!("unknown field {}", name),
                }
            },
            Some(&query::Selection::FragmentSpread(_)) => {
                panic!("not implemented!");
            },
            Some(&query::Selection::InlineFragment(_)) => {
                panic!("not implemented!");
            },
            None => Ok(None)
        }
    }
}

{{/objects}}

{{#interfaces}}
struct {{name}}Selection<'a, T> where T: 'a + Schema {
    target: Box<{{name}}<Schema=T>>,
    selection_set: &'a [query::Selection],
}

impl<'a, T> Serialize for {{name}}Selection<'a, T> where T: 'a + Schema {
    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {
        serializer.serialize_map({{name}}StructVisitor {
            target: &*self.target,
            iter: self.selection_set.iter(),
        })
    }
}

struct {{name}}StructVisitor<'a, T, I> where T: 'a + Schema, I: Iterator<Item=&'a query::Selection> {
    target: &'a {{name}}<Schema=T>,
    iter: I,
}

impl<'a, T, I> MapVisitor for {{name}}StructVisitor<'a, T, I> where T: 'a + Schema, I: Iterator<Item=&'a query::Selection> {
    fn visit<S>(&mut self, serializer: &mut S) -> Result<Option<()>, S::Error> where S: Serializer {
        match self.iter.next() {
            Some(&query::Selection::Field(ref field)) => {
                match field.name().as_str() {
                    {{#fields}}
                    "{{name}}" => {
                        let target = self.target.{{name}}({{{arguments}}});
                        {{{preserialize}}}
                        Ok(Some(try!(serializer.serialize_map_elt(&field.alias().as_str(), target))))
                    },
                    {{/fields}}
                    name => panic!("unknown field {}", name),
                }
            },
            Some(&query::Selection::FragmentSpread(_)) => {
                panic!("not implemented!");
            },
            Some(&query::Selection::InlineFragment(_)) => {
                panic!("not implemented!");
            },
            None => Ok(None)
        }
    }
}

{{/interfaces}}
