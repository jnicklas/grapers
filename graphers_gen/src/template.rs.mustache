extern crate graphers_core;
extern crate graphers_perform;
extern crate serde;

use std::borrow::Cow;
use serde::{Serialize, Serializer};
use serde::ser::{MapVisitor};
use self::graphers_core::*;
use self::graphers_perform::*;
use std::any::TypeId;
use std::mem::transmute;

{{#query_root}}
pub fn query<'a, T>(schema: &T, context: &'a Context) -> QueryResult<'a, <T as Schema>::{{name}}> where T: Schema {
	let query = context.query().expect("should define a query");
	QueryResult(Selection::new(context, {{name}}(schema.query_root()), query.selection_set()))
}

pub struct QueryResult<'a, T>(Selection<'a, {{name}}<T>>) where T: 'static + Resolve{{name}};
{{/query_root}}

////////////////////////////////////////////////////////////////////////////////
// INTROSPECTION
// Via this constant it is possible to reflect on the full schema
////////////////////////////////////////////////////////////////////////////////

pub fn reflect() -> graphers_core::Context {
    {{{introspect}}}
}

////////////////////////////////////////////////////////////////////////////////
// RESOLVE TRAITS
// Implement these in your own code to resolve the fields in a query
////////////////////////////////////////////////////////////////////////////////

pub trait Schema: 'static {
    {{#objects}}
    type {{name}}: Resolve{{name}};
    {{/objects}}

    {{#scalars}}
    type {{name}}: query::Coerce + Serialize;
    {{/scalars}}

    {{#query_root}}
    fn query_root(&self) -> Self::{{name}};
    {{/query_root}}
}

pub trait HasSchema {
    type Schema: Schema;
}

{{#objects}}
pub trait Resolve{{name}}: HasSchema + {{{implemented_interfaces}}} {
    {{#fields}}
    fn {{name}}(&self, {{{parameters}}}) -> {{{ty}}};
    {{/fields}}
}

{{/objects}}

////////////////////////////////////////////////////////////////////////////////
// INTERFACES
// GraphQL interfaces which can be implemented by other types
////////////////////////////////////////////////////////////////////////////////

{{#interfaces}}
pub trait {{name}}: Any + HasSchema {
    {{#fields}}
    fn {{name}}(&self, {{{parameters}}}) -> {{{ty}}};
    {{/fields}}
}

{{/interfaces}}

////////////////////////////////////////////////////////////////////////////////
// UNIONS
// GraphQL unions which can return multiple separate types
////////////////////////////////////////////////////////////////////////////////

{{#unions}}
pub enum {{name}}<T: Schema> {
    {{#variants}}
    {{name}}(T::{{name}}),
    {{/variants}}
}

{{/unions}}

////////////////////////////////////////////////////////////////////////////////
// ENUM
// GraphQL enums which can return a fixed set of scalar values
////////////////////////////////////////////////////////////////////////////////

{{#enums}}
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum {{name}} {
    {{#variants}}
    {{name}},
    {{/variants}}
}

{{/enums}}

////////////////////////////////////////////////////////////////////////////////
// INPUT OBJECTS
// Objects which can represent structured input data
////////////////////////////////////////////////////////////////////////////////

{{#input_objects}}
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub struct {{name}} {
    {{#fields}}
    pub {{name}}: {{ty}},
    {{/fields}}
}

{{/input_objects}}

////////////////////////////////////////////////////////////////////////////////
// PLUMBING
// Everything after this line is plumbing machinery, you can ignore it
////////////////////////////////////////////////////////////////////////////////

{{#query_root}}
impl<'a, T> Serialize for QueryResult<'a, T> where T: 'static + Resolve{{name}} {
    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {
        self.0.serialize(serializer)
    }
}
{{/query_root}}

{{#objects}}

struct {{name}}<T>(T) where T: 'static + Resolve{{name}};

struct {{name}}Ref<'a, T>(&'a T) where T: 'a + Resolve{{name}};

impl<T> HasSchema for {{name}}<T> where T: 'static + Resolve{{name}} {
    type Schema = <T as HasSchema>::Schema;
}

impl<'a, T> HasSchema for {{name}}Ref<'a, T> where T: 'a + Resolve{{name}} {
    type Schema = <T as HasSchema>::Schema;
}

impl<T> Select for {{name}}<T> where T: Resolve{{name}} {
    fn select<S>(&self, context: &Context, selection: &query::Selection, serializer: &mut S) -> Result<Option<()>, S::Error> where S: Serializer {
        {{name}}Ref(&self.0).select(context, selection, serializer)
    }
}

impl<'a, T> Select for {{name}}Ref<'a, T> where T: 'a + Resolve{{name}} {
    fn select<S>(&self, context: &Context, selection: &query::Selection, serializer: &mut S) -> Result<Option<()>, S::Error> where S: Serializer {
        match selection {
            &query::Selection::Field(ref field) => {
                match field.name().as_str() {
                    {{#fields}}
                    "{{name}}" => {
                        let target = Resolve{{object_name}}::{{name}}(self.0, {{{arguments}}});
                        {{{preserialize}}}
                        Ok(Some(try!(serializer.serialize_map_elt(&field.alias().as_str(), target))))
                    },
                    {{/fields}}
                    "__type" => {
                        let schema_context = reflect();
                        let name: Cow<str> = field.require(&FieldName::new("name")).coerce();
                        let definition = schema_context.resolve(&TypeName::new(name.to_string())).expect("cannot query for non existing types yet");
                        let target = Selection::new(&schema_context, definition, field.selection_set());
                        Ok(Some(try!(serializer.serialize_map_elt(&field.alias().as_str(), target))))
                    },
                    name => panic!("unknown field {}", name),
                }
            },
            &query::Selection::FragmentSpread(ref name) => {
				let definition = context.resolve(name).expect("unable to find type");
				let fragment = definition.fragment().expect("type is not a fragment");

				if fragment.on().as_str() == "{{name}}" {
					let iter = fragment.selection_set().iter();
					let mut visitor = SelectionStructVisitor::new(context, self, iter);
					while let Some(_) = try!(MapVisitor::visit(&mut visitor, serializer)) {};
				}
				Ok(Some(()))
            },
            &query::Selection::InlineFragment(ref fragment) => {
				if fragment.on().as_str() == "{{name}}" {
					let iter = fragment.selection_set().iter();
					let mut visitor = SelectionStructVisitor::new(context, self, iter);
					while let Some(_) = try!(MapVisitor::visit(&mut visitor, serializer)) {};
				}
				Ok(Some(()))
            },
        }
    }
}

{{/objects}}

{{#interfaces}}

impl<S> {{name}}<Schema=S> where S: Schema {
    pub fn is<T: {{name}}>(&self) -> bool {
        TypeId::of::<T>() == Any::get_type_id(self)
    }

    pub fn downcast_ref<T: {{name}}>(&self) -> Option<&T> {
        if self.is::<T>() {
            unsafe {
                let trait_object: TraitObject = transmute(self);
                Some(transmute(trait_object.data))
            }
        } else {
            None
        }
    }
}

impl<T> Select for {{name}}<Schema=T> where T: Schema {
    fn select<S>(&self, context: &Context, selection: &query::Selection, serializer: &mut S) -> Result<Option<()>, S::Error> where S: Serializer {
		{{#implementors}}
			if let Some(target) = self.downcast_ref::<T::{{name}}>() {
				let target_ref = {{name}}Ref(target);
				return Select::select(&target_ref, context, selection, serializer)
			}
		{{/implementors}}
		panic!("cannot find implementing type")
    }
}

impl<T> Select for Box<{{name}}<Schema=T>> where T: Schema {
    fn select<S>(&self, context: &Context, selection: &query::Selection, serializer: &mut S) -> Result<Option<()>, S::Error> where S: Serializer {
		{{#implementors}}
			if let Some(target) = self.downcast_ref::<T::{{name}}>() {
				let target_ref = {{name}}Ref(target);
				return Select::select(&target_ref, context, selection, serializer)
			}
		{{/implementors}}
		panic!("cannot find implementing type")
	}
}

{{/interfaces}}

{{#unions}}

impl<T> Select for {{name}}<T> where T: Schema {
    fn select<S>(&self, context: &Context, selection: &query::Selection, serializer: &mut S) -> Result<Option<()>, S::Error> where S: Serializer {
        match self {
            {{#variants}}
            &{{union_name}}::{{name}}(ref target) => {
                Select::select(&{{name}}Ref(target), context, selection, serializer)
            }
            {{/variants}}
        }
    }
}

{{/unions}}

{{#enums}}
impl query::Coerce for {{name}} {
    fn coerce(value: &query::Value) -> Self {
        match value {
            {{#variants}}
            &query::Value::String(ref s) if &*s == "{{name}}" => {{enum_name}}::{{name}},
            {{/variants}}
            _ => panic!("cannot convert {:?} into enum {{name}}", value)
        }
    }
}

impl Serialize for {{name}} {
    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {
        match self {
            {{#variants}}
            &{{enum_name}}::{{name}} => "{{name}}".serialize(serializer),
            {{/variants}}
        }
    }
}
{{/enums}}

{{#input_objects}}
impl query::Coerce for {{name}} {
    fn coerce(value: &query::Value) -> Self {
        match value {
            &query::Value::Object(ref object) => {
                {{name}} {
                   {{#fields}}
                   {{name}}: object.get(&FieldName::new("{{name}}")).expect("can't find field in input object").coerce::<{{ty}}>(),
                   {{/fields}}
                }
            }
            _ => panic!("cannot convert {:?} into input object {{name}}", value)
        }
    }
}

{{/input_objects}}
