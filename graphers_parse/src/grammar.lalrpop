use core::*;
use core::schema::*;
use super::OperationType;
use definition::Definition;
use document::Document;
use tok::{self, Tok};
use std::collections::BTreeMap;

grammar<'input>(text: &'input str)["LALR(1)"];

pub Document: Document = {
    <definitions:(Definition)+> => Document { definitions: definitions }
};

Definition: Definition = {
    OperationDefinition,
    FragmentDefinition,
    TypeSystemDefinition,
};

OperationDefinition: Definition = {
    <operation:OperationType> <fields:SelectionSet> => {
        match operation {
            OperationType::Query => Definition::Query(query::Query::new(fields)),
            _ => panic!("mutation is not yet supported"),
        }
    },
    <fields:SelectionSet> => {
        Definition::Query(query::Query::new(fields))
    }
};

SelectionSet: Vec<query::Selection> = { "{" <(Selection)*> "}" };

Selection: query::Selection = {
    <field:Field> => query::Selection::Field(field),
    <fragment_spread:FragmentSpread> => query::Selection::FragmentSpread(fragment_spread),
    <inline_fragment:InlineFragment> => query::Selection::InlineFragment(inline_fragment),
};

FragmentSpread: TypeName = { "..." <name:FragmentName> => TypeName::new(name) };

InlineFragment: query::InlineFragment = {
    "..." "on" <name:TypeName> <selection_set:SelectionSet> => query::InlineFragment::new(name, selection_set),
};

Field: query::Field = {
    <alias:(Alias)?> <name:FieldName> <arguments:(Arguments)?> <selection_set:(SelectionSet)?> => {
        query::Field::new(name, alias, arguments.unwrap_or(Vec::new()), selection_set.unwrap_or(Vec::new()))
    }
};

Arguments: Vec<query::Argument> = {
    "(" <arguments:(Argument)*> ")" => { arguments }
};

Argument: query::Argument = {
    <name:FieldName> ":" <value:Value> => { query::Argument::new(name, value) }
};

Alias: FieldName = {
    <alias:FieldName> ":" => alias
};

Value: Value = {
    <value:"String"> => Value::String(value.into()),
    // ConstVariable
    <value:"IntValue"> => Value::Int(value),
    <value:"FloatValue"> => Value::Float(value),
    <value:"true"> => Value::Boolean(true),
    <value:"false"> => Value::Boolean(false),
    <value:EnumVariant> => Value::String(value.as_str().into()),
    <list:ListValue> => Value::List(list),
    <object:ObjectValue> => Value::Object(object),
};

ListValue: Vec<Value> = {
    "[" <(Value)*> "]"
};

ObjectValue: BTreeMap<FieldName, Value> = {
    "{" <items:(ObjectValueItem)*> "}" => { items.into_iter().collect() }
};

ObjectValueItem: (FieldName, Value) = {
    <name:FieldName> ":" <value:Value> => { (name, value) }
};

FragmentDefinition: Definition = {
    "fragment" <name:TypeName> "on" <on:TypeName> <selection:SelectionSet> => {
        Definition::Fragment(query::Fragment::new(name, on, selection))
    }
};

TypeSystemDefinition: Definition = {
    SchemaDefinition,
    TypeDefinition
    // TypeExtensionDefinition
    // DirectiveDefinition
};

SchemaDefinition: Definition = {
    "schema" "{" <operations:(OperationTypeDefinition)+> "}" => {
      let mut query = Vec::new();

      for (operation, name) in operations {
        match operation {
          OperationType::Query => query.push(name),
          _ => (),
        }
      }

      if query.len() > 1 {
        panic!("schema must not contain more than one query definition");
      }

      Definition::Schema(Schema::new(query.pop(), None))
    }
};

OperationTypeDefinition: (OperationType, TypeName) = {
    <operation:OperationType> ":" <name:TypeName> => { (operation, name) }
};

OperationType: OperationType = {
    "query" => { OperationType::Query },
    "mutation" => { OperationType::Mutation },
};

Type: Type = {
    <type_name:TypeName> => {
        match type_name.as_str() {
            "Int" => Type::Int,
            "Float" => Type::Float,
            "String" => Type::String,
            "Boolean" => Type::Boolean,
            "Id" => Type::Id,
            _ => Type::NamedType(type_name)
        }
    },
    "[" <ty:Type> "]" => { Type::List(Box::new(ty)) },
    <ty:Type> "!" => { Type::NonNull(Box::new(ty)) }
};

TypeName: TypeName = {
    <name:Name> => { TypeName(name.to_string()) }
};

FieldName: FieldName = {
    <name:Name> => { FieldName(name.to_string()) }
};

EnumVariant: EnumVariant = {
    <name:Name> => { EnumVariant(name.to_string()) }
};

FragmentName: &'input str = {
    "schema" => { "schema" },
    "query" => { "query" },
    "mutation" => { "mutation" },
    "type" => { "type" },
    "interface" => { "interface" },
    "fragment" => { "fragment" },
    "input" => { "input" },
    "enum" => { "enum" },
    "union" => { "union" },
    "scalar" => { "scalar" },
    "implements" => { "implements" },
    <value:"identifier"> => { value },
};

Name: &'input str = {
    "on" => { "on" },
    <FragmentName>,
};

TypeDefinition: Definition = {
    ScalarTypeDefinition,
    ObjectTypeDefinition,
    InterfaceTypeDefinition,
    UnionTypeDefinition,
    EnumTypeDefinition,
    InputObjectTypeDefinition,
};

ScalarTypeDefinition: Definition = {
    "scalar" <name:TypeName> => {
        Definition::Scalar(Scalar::new(name))
    }
};

EnumTypeDefinition: Definition = {
    "enum" <name:TypeName> "{" <variants:(EnumVariant)+> "}" => {
        Definition::Enum(Enum::new(name, variants))
    }
};

UnionTypeDefinition: Definition = {
    "union" <name:TypeName> "=" <variants:UnionMembers> => {
        Definition::Union(Union::new(name, variants))
    }
};

UnionMembers: Vec<TypeName> = {
    <name:TypeName> => { vec![name] },
    <members:UnionMembers> "|" <name:TypeName> => {
        let mut members = members.clone();
        members.push(name);
        members
    }
};

InputObjectTypeDefinition: Definition = {
    "input" <name:TypeName> "{" <fields:InputValueDefinition+> "}" => {
        Definition::InputObject(schema::InputObject::new(name, fields))
    }
};

InputValueDefinition: schema::InputObjectField = {
    <name:FieldName> ":" <ty:Type> => {
        schema::InputObjectField::new(name, ty, None)
    },
    <name:FieldName> ":" <ty:Type> "=" <value:Value> => {
        schema::InputObjectField::new(name, ty, Some(value))
    }
};

ObjectTypeDefinition: Definition = {
    "type" <name:TypeName> <interfaces:(ImplementsInterfaces)?> "{" <fields:(FieldDefinition)+> "}" => {
        Definition::Object(Object::new(name, fields, interfaces.unwrap_or_else(|| Vec::new())))
    }
};

ImplementsInterfaces: Vec<TypeName> = {
    "implements" <types:(TypeName)+> => { types }
};

InterfaceTypeDefinition: Definition = {
    "interface" <name:TypeName> "{" <fields:(FieldDefinition)+> "}" => {
        Definition::Interface(Interface::new(name, fields))
    }
};

FieldDefinition: Field = {
    <name:FieldName> <args:(FieldArguments)?> ":" <ty:Type> => {
        Field::new(name, ty, args.unwrap_or(Vec::new()))
    }
};

FieldArguments: Vec<Argument> = {
    "(" <args:(FieldArgument)*> ")" => { args }
};

FieldArgument: Argument = {
    <name:FieldName> ":" <ty:Type> => { Argument::new(name, ty) }
};

extern {
    type Location = usize;
    type Error = tok::Error;
    enum Tok<'input> {
        "schema" => Tok::Schema,
        "query" => Tok::Query,
        "mutation" => Tok::Mutation,
        "type" => Tok::Type,
        "interface" => Tok::Interface,
        "fragment" => Tok::Fragment,
        "input" => Tok::Input,
        "enum" => Tok::Enum,
        "union" => Tok::Union,
        "scalar" => Tok::Scalar,
        "on" => Tok::On,
        "implements" => Tok::Implements,
        "identifier" => Tok::Identifier(<&'input str>),
        "String" => Tok::StringValue(<&'input str>),
        "IntValue" => Tok::IntValue(<i32>),
        "FloatValue" => Tok::FloatValue(<f32>),
        "true" => Tok::True,
        "false" => Tok::False,

        "!" => Tok::Dollar,
        "$" => Tok::Bang,
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        ":" => Tok::Colon,
        "..." => Tok::Ellipsis,
        "=" => Tok::Equals,
        "@" => Tok::At,
        "[" => Tok::LBracket,
        "]" => Tok::RBracket,
        "{" => Tok::LBrace,
        "|" => Tok::Pipe,
        "}" => Tok::RBrace,
    }
}
