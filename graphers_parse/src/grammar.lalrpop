use core::*;
use super::OperationType;
use definition::Definition;
use document::Document;
use tok::{self, Tok};

grammar<'input>(text: &'input str)["LALR(1)"];

pub Document: Document = {
    <definitions:(Definition)+> => Document { definitions: definitions }
};

Definition: Definition = {
    // OperationDefinition
    // FragmentDefinition
    TypeSystemDefinition
};

TypeSystemDefinition: Definition = {
    SchemaDefinition,
    TypeDefinition
    // TypeExtensionDefinition
    // DirectiveDefinition
};

SchemaDefinition: Definition = {
    "schema" "{" <operations:(OperationTypeDefinition)+> "}" => {
      let query = operations.iter().filter_map(|q| {
        match q {
          &OperationType::Query(ref type_name) => Some(type_name),
          _ => None
        }
      }).collect::<Vec<_>>();

      if query.len() > 1 {
        panic!("schema must not contain more than one query definition");
      }

      Definition::Schema(Schema::new(query.get(0).map(|&v| v.clone()), None))
    }
};

OperationTypeDefinition: OperationType = {
    "query" ":" <named_type:TypeName> => {
        OperationType::Query(named_type)
    },

    "mutation" ":" <named_type:TypeName> => {
        OperationType::Mutation(named_type)
    }
};

Type: Type = {
    <type_name:TypeName> => { Type::NamedType(type_name) },
    "[" <ty:Type> "]" => { Type::List(Box::new(ty)) },
    <ty:Type> "!" => { Type::NonNull(Box::new(ty)) }
};

TypeName: TypeName = {
    <name:Identifier> => { TypeName(name.to_string()) }
};

FieldName: FieldName = {
    <name:Identifier> => { FieldName(name.to_string()) }
};

Identifier: &'input str = {
    "schema" => { "schema" },
    "query" => { "query" },
    "mutation" => { "mutation" },
    "type" => { "type" },
    "implements" => { "implements" },
    "on" => { "on" },
    <value:"identifier"> => { value },
};

TypeDefinition: Definition = {
//     ScalarTypeDefinition
    ObjectTypeDefinition
//     InterfaceTypeDefinition
//     UnionTypeDefinition
//     EnumTypeDefinition
//     InputObjectTypeDefinition
};

ObjectTypeDefinition: Definition = {
    "type" <name:TypeName> <interfaces:(ImplementsInterfaces)?> "{" <fields:(FieldDefinition)+> "}" => {
        Definition::Object(Object::new(name, fields, interfaces.unwrap_or_else(|| Vec::new())))
    }
};

ImplementsInterfaces: Vec<TypeName> = {
    "implements" <types:(TypeName)+> => { types }
};

FieldDefinition: Field = {
    <name:FieldName> ":" <ty:Type> => {
        Field::new(name, ty)
    }
};

extern {
    type Location = usize;
    type Error = tok::Error;
    enum Tok<'input> {
        "schema" => Tok::Schema,
        "query" => Tok::Query,
        "mutation" => Tok::Mutation,
        "type" => Tok::Type,
        "on" => Tok::On,
        "implements" => Tok::Implements,
        "identifier" => Tok::Identifier(<&'input str>),

        "!" => Tok::Dollar,
        "$" => Tok::Bang,
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        ":" => Tok::Colon,
        "=" => Tok::Equals,
        "@" => Tok::At,
        "[" => Tok::LBracket,
        "]" => Tok::RBracket,
        "{" => Tok::LBrace,
        "|" => Tok::Pipe,
        "}" => Tok::RBrace,
    }
}
